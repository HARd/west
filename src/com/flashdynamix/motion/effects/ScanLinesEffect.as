package com.flashdynamix.motion.effects {	import flash.display.BitmapData;	import flash.display.Graphics;	import flash.display.Shape;	import flash.geom.ColorTransform;	import com.flashdynamix.motion.effects.IEffect;		/**	 * @author FlashDynamix	 */	public class ScanLinesEffect implements IEffect {		public static const VERTICAL : String = "vertical";		public static const HORIZONTAL : String = "horizontal";		public static const GRID : String = "grid";		public var ct : ColorTransform;		public var blendMode : String = "normal";		private var _thickness : int;		private var _distance : int;		private var _direction : String;		private var lines : Shape;		private var _width : int;		private var _height : int;		public function ScanLinesEffect(direction : String, thickness : int = 1, distance : int = 3, width : int = 500, height : int = 500, ct : ColorTransform = null, blendMode : String = "normal") {			_direction = direction;			_width = width;			_height = height;			_thickness = thickness;			_distance = distance;						this.ct = (ct == null) ? new ColorTransform() : ct;			this.blendMode = blendMode;						lines = new Shape();						update();		}		private function update() : void {			var vector : Graphics = lines.graphics;						vector.clear();			vector.lineStyle(_thickness, 0x000000, 1);						var i : int;			var len : int = _width / _distance;						switch(_direction) {				case VERTICAL : 					for(i = 0;i <= len; i++) {						vector.moveTo(i * _distance, 0);						vector.lineTo(i * _distance, _height);					}					break;				case HORIZONTAL : 					for(i = 0;i <= len; i++) {						vector.moveTo(0, i * _distance);						vector.lineTo(_width, i * _distance);					}					break;				case GRID : 					for(i = 0;i <= len; i++) {						vector.moveTo(i * _distance, 0);						vector.lineTo(i * _distance, _height);					}					for(i = 0;i <= len; i++) {						vector.moveTo(0, i * _distance);						vector.lineTo(_width, i * _distance);					}					break;			}		}		public function render(bmd : BitmapData) : void {			bmd.draw(lines, null, ct, blendMode);		}	}}