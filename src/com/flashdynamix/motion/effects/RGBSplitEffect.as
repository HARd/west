package com.flashdynamix.motion.effects {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.BlendMode;	import flash.display.PixelSnapping;	import flash.geom.Matrix;	import flash.geom.Point;	import com.flashdynamix.motion.effects.IEffect;		/**	 * @author FlashDynamix	 */	public class RGBSplitEffect implements IEffect {		public var rBmd : BitmapData;		public var gBmd : BitmapData;		public var bBmd : BitmapData;		public var rMtx : Matrix = new Matrix();		public var gMtx : Matrix = new Matrix();		public var bMtx : Matrix = new Matrix();		public var rBlendMode : String = "normal";		public var gBlendMode : String = "normal";		public var bBlendMode : String = "normal";		public var order : Array = [];		public var sourceBmd : BitmapData;		public function RGBSplitEffect(sourceBmd : BitmapData) {			order = [BitmapDataChannel.RED, BitmapDataChannel.GREEN, BitmapDataChannel.BLUE];						this.sourceBmd = sourceBmd;						var pt : Point = new Point();						var rBmdAlpha : BitmapData = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFF000000);			rBmdAlpha.copyChannel(sourceBmd, sourceBmd.rect, pt, BitmapDataChannel.RED, BitmapDataChannel.ALPHA);						rBmd = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFFFF0000);			rBmd.draw(new Bitmap(rBmdAlpha, PixelSnapping.AUTO, true), null, null, BlendMode.ERASE);						var gBmdAlpha : BitmapData = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFF000000);			gBmdAlpha.copyChannel(sourceBmd, sourceBmd.rect, pt, BitmapDataChannel.GREEN, BitmapDataChannel.ALPHA);						gBmd = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFF00FF00);			gBmd.draw(new Bitmap(gBmdAlpha, PixelSnapping.AUTO, true), null, null, BlendMode.ERASE);						var bBmdAlpha : BitmapData = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFF000000);			bBmdAlpha.copyChannel(sourceBmd, sourceBmd.rect, pt, BitmapDataChannel.BLUE, BitmapDataChannel.ALPHA);						bBmd = new BitmapData(sourceBmd.width, sourceBmd.height, true, 0xFF0000FF);			bBmd.draw(new Bitmap(bBmdAlpha, PixelSnapping.AUTO, true), null, null, BlendMode.ERASE);		}		public function render(bmd : BitmapData) : void {			var i : int = 0;			var len : int = order.length;						for(i = 0;i < len; i++) {				switch(order[i]) {					case BitmapDataChannel.RED:						bmd.draw(rBmd, rMtx, null, rBlendMode);						break;					case BitmapDataChannel.GREEN:						bmd.draw(gBmd, gMtx, null, gBlendMode);						break;					case BitmapDataChannel.BLUE :						bmd.draw(bBmd, bMtx, null, bBlendMode);						break;				}			}		}	}}